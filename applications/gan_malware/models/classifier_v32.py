from torch import nn
from torchvision import models
import torch.nn.functional as F


class MyResNet(nn.Module):
    def __init__(self, num_classes):
        super(MyResNet, self).__init__()

        self.model = models.resnet50(pretrained=True)

        for param in self.model.parameters():
            param.requires_grad = False

        self.model.fc = nn.Sequential(
            nn.Linear(2048, 256),
            nn.ReLU(inplace=True),
            nn.Linear(256, num_classes))

    def forward(self, x):
        output = self.model(x)
        output = output.view(output.size(0), -1)
        output = F.normalize(output, p=2, dim=1)
        return output


class MyVgg16(nn.Module):
    def __init__(self, num_classes):
        super(MyVgg16, self).__init__()

        self.model = models.vgg16(pretrained=True)

        for param in self.model.parameters():
            param.requires_grad = False

        self.fc = nn.Sequential(
            nn.Linear(1000, 256),
            nn.ReLU(inplace=True),
            nn.Linear(256, num_classes))

    def forward(self, x):
        output = self.model(x)
        output = self.fc(output)
        output = output.view(output.size(0), -1)
        output = F.normalize(output, p=2, dim=1)
        return output
