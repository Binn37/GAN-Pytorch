from typing import Tuple, Any

import numpy as np
import pandas as pd
import torchvision
from torch.utils.data import Dataset


# def default_image_loader(path):
#     image = cv2.imread(path)
#     image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
#
#     return image


class ImageLoader(torchvision.datasets.ImageFolder):
    def __init__(self, annotations_file, root: str, transform=None, target_transform=None):
        super().__init__(root, transform, target_transform)
        self.pe_features = pd.read_excel(annotations_file, sheet_name="classification", engine='openpyxl')
        self.transform = transform
        self.target_transform = target_transform

    def __getitem__(self, index: int) -> Tuple[Any, Any, Any]:
        """
        Args:
            index (int): Index
        Logic:
            It follows all actions except that we import PE Features (DllCharacteristics, Checksum) to data output
        Returns:
            tuple: (sample, target) where target is class_index of the target class.
        """
        path, target = self.samples[index]
        print(path)
        sample = self.loader(path)
        sample_name = path.split("\\")[-1]
        sample_name = sample_name.split(".")[0]
        pe_features_sample = self.pe_features[self.pe_features['legitimate'].str.contains(sample_name)]
        # print(pe_features_sample)
        pe_features = [int(pe_features_sample["DllCharacteristics"].values[0]),
                       int(pe_features_sample["CheckSum"].values[0])]

        if self.transform is not None:
            sample = self.transform(sample)
            print(sample.size())

        if self.target_transform is not None:
            target = self.target_transform(target)

        return sample, target, pe_features

    def __len__(self) -> int:
        return len(self.samples)
