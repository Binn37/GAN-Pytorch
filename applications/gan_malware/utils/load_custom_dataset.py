from typing import Tuple, Any

import pandas as pd
import torchvision
from torch.utils.data import Dataset


# def default_image_loader(path):
#     image = cv2.imread(path)
#     image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
#
#     return image


class ImageLoader(torchvision.datasets.ImageFolder):
    def __init__(self, annotations_file, root: str, transform=None, target_transform=None):
        super().__init__(root, transform, target_transform)
        # self.pe_features = pd.read_csv(annotations_file)
        self.transform = transform
        self.target_transform = target_transform

    def __getitem__(self, index: int) -> Tuple[Any, Any, Any]:
        """
        Args:
            index (int): Index
        Logic:
            It follows all actions except that we import PE Features (DllCharacteristics, Checksum) to data output
        Returns:
            tuple: (sample, target) where target is class_index of the target class.
        """
        path, target = self.samples[index]
        sample = self.loader(path)
        print(path)
        if self.transform is not None:
            sample = self.transform(sample)
        if self.target_transform is not None:
            target = self.target_transform(target)

        return sample, target, path

    def __len__(self) -> int:
        return len(self.samples)
