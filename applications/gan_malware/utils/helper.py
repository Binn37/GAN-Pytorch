import os

import numpy as np
import torch

from PIL import Image
from torch.autograd import Variable
from torchvision.utils import save_image

from applications.gan_malware.config.config_core import FloatTensor
from applications.gan_malware.config.config_params_V1 import opt



def weights_init_normal(m):
    classname = m.__class__.__name__
    if classname.find("Conv") != -1:
        torch.nn.init.normal_(m.weight.data, 0.0, 0.02)
    elif classname.find("BatchNorm") != -1:
        torch.nn.init.normal_(m.weight.data, 1.0, 0.02)
        torch.nn.init.constant_(m.bias.data, 0.0)


def to_categorical(y, num_columns):
    """Returns one-hot encoded Variable"""
    y_cat = np.zeros((y.shape[0], num_columns))
    y_cat[range(y.shape[0]), y] = 1.0

    return Variable(FloatTensor(y_cat))


def sample_image(n_row, batches_done, generator, static_label, static_code, static_z):
    """Saves a grid of generated digits ranging from 0 to n_classes"""
    # Static sample
    latent_space = Variable(FloatTensor(np.random.normal(0, 1, (n_row ** 2, opt.latent_dim))))
    static_sample = generator(latent_space, static_label, static_code)
    save_image(static_sample.data, "images/static/%d.png" % batches_done, nrow=n_row, normalize=True)

    # Get varied c1 and c2
    zeros = np.zeros((n_row ** 2, 1))
    c_varied = np.repeat(np.linspace(-1, 1, n_row)[:, np.newaxis], n_row, 0)
    c1 = Variable(FloatTensor(np.concatenate((c_varied, zeros), -1)))
    c2 = Variable(FloatTensor(np.concatenate((zeros, c_varied), -1)))
    sample1 = generator(static_z, static_label, c1)
    sample2 = generator(static_z, static_label, c2)
    save_image(sample1.data, "images/varying_c1/%d.png" % batches_done, nrow=n_row, normalize=True)
    save_image(sample2.data, "images/varying_c2/%d.png" % batches_done, nrow=n_row, normalize=True)


def get_size(param, width):
    pass


def getBinaryData(filename):
    pass


def createRGBImage(family_name, file_name, inx, width=None):
    """
    Create RGB image from 24 bit binary data 8bit Red, 8 bit Green, 8bit Blue
    :param family_name: family of image file
    :param file_name: name of malware
    :param inx: index of the loop create image
    """
    index = 0
    rgb_data = []

    # Read binary file
    binary_data = getBinaryData(file_name)

    if binary_data:

        # Create R,G,B pixels
        while index < len(binary_data):
            R = binary_data[index]
            G = binary_data[index]
            B = binary_data[index]
            index += 1
            rgb_data.append((R, G, B))

        size = get_size(len(rgb_data), width)
        save_file_format_name(family_name, file_name, rgb_data, size, 'RGB', inx)


def save_file_format_name(family_name, file_name, data, size, image_type, inx):
    """
    Create RGB image with name format
    :param family_name: family of image file
    :param file_name: name of malware
    :param data: data to convert to image
    :param size: size of image
    :param image_type: type image (RGB,...)
    :param inx: index of the loop create image
    """
    image = Image.new(image_type, size)
    image.putdata(data)

    # setup output file_name
    dir = "temp"
    # image_name = os.getcwd() + os.sep + dir + os.sep + str(float(time.time())) + ".png"
    image_name = f"{os.getcwd()}\\{dir}\\{family_name}_{inx}.png"
    print(image_name)

    os.makedirs(os.path.dirname(family_name), exist_ok=True)

    image.save(image_name)
    print('The file', image_name, 'saved.')

    return image_name
