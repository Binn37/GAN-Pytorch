import os
from PIL import Image


def get_size(param, width):
    pass


def getBinaryData(filename):
    pass


def createRGBImage(family_name, file_name, inx, width=None):
    """
    Create RGB image from 24 bit binary data 8bit Red, 8 bit Green, 8bit Blue
    :param family_name: family of image file
    :param file_name: name of malware
    :param inx: index of the loop create image
    """
    index = 0
    rgb_data = []

    # Read binary file
    binary_data = getBinaryData(file_name)

    if binary_data:

        # Create R,G,B pixels
        while index < len(binary_data):
            R = binary_data[index]
            G = binary_data[index]
            B = binary_data[index]
            index += 1
            rgb_data.append((R, G, B))

        size = get_size(len(rgb_data), width)
        save_file_format_name(family_name, file_name, rgb_data, size, 'RGB', inx)


def save_file_format_name(family_name, file_name, data, size, image_type, inx):
    """
    Create RGB image with name format
    :param family_name: family of image file
    :param file_name: name of malware
    :param data: data to convert to image
    :param size: size of image
    :param image_type: type image (RGB,...)
    :param inx: index of the loop create image
    """
    image = Image.new(image_type, size)
    image.putdata(data)

    # setup output file_name
    dir = "temp"
    # image_name = os.getcwd() + os.sep + dir + os.sep + str(float(time.time())) + ".png"
    image_name = f"{os.getcwd()}\\{dir}\\{family_name}_{inx}.png"
    print(image_name)

    os.makedirs(os.path.dirname(family_name), exist_ok=True)

    image.save(image_name)
    print('The file', image_name, 'saved.')

    return image_name
