# import argparse
import os
#
# import torchvision.transforms as transforms
#
# from config.config_original import opt_v2
# from utils import load_image_dataset

# os.makedirs("../data/dataset-v1/data", exist_ok=True)
# PATH_TO_GET_DATA = "../data/dataset-v1/data"
# transform = transforms.Compose(
#     [transforms.Resize(opt_v2.img_size), transforms.ToTensor(), transforms.Normalize([0.5], [0.5])]
# )
# data_read = load_image_dataset.read_dataset(path=PATH_TO_GET_DATA, transform_info=transform)
# dataloader = load_image_dataset.load_dataset(dataset_read=data_read, batch_size=opt_v2.batch_size, shuffle="true")

import torch
import torchvision


class PyTorchDetection:
    def __init__(self):
        assert torch.cuda.is_available()
        self.cuda_device = torch.device('cuda')
        self.convert = torchvision.transforms.Compose([
            torchvision.transforms.ConvertImageDtype(torch.float32),
            torchvision.transforms.Lambda(lambda x: x.permute(2, 0, 1)),
            torchvision.transforms.Lambda(lambda x: x.unsqueeze(0)),
        ])
        model = torchvision.models.detection.ssdlite320_mobilenet_v3_large(pretrained=True)
        self.torch_model = model.eval().to(self.cuda_device)

a = torch.cuda.is_available()
cuda_d = torch.device('cuda')
print(cuda_d)
b = PyTorchDetection()
print(b)