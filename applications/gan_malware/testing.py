import os
import torchvision.utils as vutils
import numpy as np
import torchvision.transforms as transforms
from matplotlib import pyplot as plt

from applications.gan_malware.config.config_core import FloatTensor
from config.config_params_v2 import opt
from utils import load_image_dataset, load_custom_dataset

os.makedirs("../data/dataset-v1/data", exist_ok=True)
PATH_TO_GET_DATA = "../data/dataset-v1/data"
PATH_TO_GET_PE_FEATURES = "../data/dataset-v1/classification_ransomware_family.xlsx"
transform = transforms.Compose(
    [transforms.Resize(opt.img_size),
     transforms.CenterCrop(opt.img_size),
     transforms.ToTensor(),
     transforms.Normalize([0.5], [0.5])]
)

# data_read = load_image_dataset.read_dataset(path=PATH_TO_GET_DATA, transform_info=transform)
data_read = load_custom_dataset.ImageLoader(annotations_file=PATH_TO_GET_PE_FEATURES, root=PATH_TO_GET_DATA,
                                            transform=transform)
dataloader = load_image_dataset.load_dataset(dataset_read=data_read, batch_size=opt.batch_size, shuffle="true")

# Plot some training images
real_batch = next(iter(dataloader))
plt.figure(figsize=(8, 8))
plt.axis("off")
plt.title("Training Images")
plt.imshow(
    np.transpose(vutils.make_grid(real_batch[0].type(FloatTensor)[:32], padding=2, normalize=True).cpu(), (1, 2, 0)))
plt.show()

