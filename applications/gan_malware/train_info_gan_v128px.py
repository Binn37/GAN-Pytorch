import itertools
import os

import numpy as np
import pandas as pd
import torch
import torchvision.transforms as transforms
from torch.autograd import Variable

from config.config_core import FloatTensor, cuda, LongTensor
from config.config_params_v3 import Opt
from models.info_gan_v128 import Generator, Discriminator
from utils import load_custom_dataset
from utils import load_image_dataset
from utils.helper import weights_init_normal, to_categorical, sample_image_v3_9, min_max_scaler, build_feature_code
from utils.wandb_helper import init_wandb, generate_image_v3_9, log_loss_models


def main():
    os.makedirs("images/static/", exist_ok=True)
    os.makedirs("images/varying_c1/", exist_ok=True)
    os.makedirs("images/varying_c2/", exist_ok=True)
    os.makedirs("weights/", exist_ok=True)

    # ----------
    # Setup before training
    # ----------

    # config setting
    opt = Opt()
    print(vars(opt))

    # Loss functions
    adversarial_loss = torch.nn.MSELoss()
    categorical_loss = torch.nn.CrossEntropyLoss()
    continuous_loss = torch.nn.MSELoss()

    # Loss weights
    lambda_cat = 1
    lambda_con = 0.1

    # Initialize generator and discriminator
    generator = Generator(opt=opt)
    discriminator = Discriminator(opt=opt)

    if cuda:
        print("We are using GPU for training models")
        generator.cuda()
        discriminator.cuda()
        adversarial_loss.cuda()
        categorical_loss.cuda()
        continuous_loss.cuda()

    # Initialize weights
    generator.apply(weights_init_normal)
    discriminator.apply(weights_init_normal)

    # Configure and load data loader
    os.makedirs("../data/dataset-v1/data", exist_ok=True)
    PATH_TO_GET_DATA = "../data/dataset-v1/data"
    PATH_TO_GET_PE_FEATURES = "../data/dataset-v1/classification_ransomware_family.xlsx"
    transform = transforms.Compose(
        [transforms.Resize(opt.img_size_128),
         transforms.CenterCrop(opt.img_size_128),
         transforms.ToTensor(),
         transforms.Grayscale(),
         transforms.Normalize([0.5], [0.5])]
    )

    data_read = load_custom_dataset.ImageLoader(annotations_file=PATH_TO_GET_PE_FEATURES, root=PATH_TO_GET_DATA,
                                                transform=transform)
    data_loader = load_image_dataset.load_dataset(dataset_read=data_read, batch_size=opt.batch_size, shuffle="true")

    unique_dll_vals = data_read.pe_features["DllCharacteristics"].unique()
    one_hot_unique_dll_vals = pd.get_dummies(unique_dll_vals).values

    unique_cs_vals = data_read.pe_features["CheckSum"].unique()
    scaled_unique_cs_vals = min_max_scaler(unique_cs_vals, -2, 2)

    # Optimizers
    optimizer_G = torch.optim.Adam(generator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))
    optimizer_D = torch.optim.Adam(discriminator.parameters(), lr=opt.lr, betas=(opt.b1, opt.b2))
    optimizer_info = torch.optim.Adam(
        itertools.chain(generator.parameters(), discriminator.parameters()), lr=opt.lr, betas=(opt.b1, opt.b2)
    )

    # Static generator inputs for sampling
    static_z = Variable(FloatTensor(np.zeros((opt.n_classes ** 2, opt.latent_dim))))
    static_label = to_categorical(
        y=np.array([num for _ in range(opt.n_classes) for num in range(opt.n_classes)]),
        num_columns=opt.n_classes,
        FloatTensor=FloatTensor
    )
    static_code = Variable(FloatTensor(np.zeros((opt.n_classes ** 2, opt.code_dim))))

    # Upload wandb to log data
    init_wandb(name_project=f"InfoGAN-Mal-V3-{opt.n_epochs}.1", entity="walter03", generator=generator,
               discriminator=discriminator,
               opt=opt)

    # ----------
    #  Training
    # ----------

    for epoch in range(opt.n_epochs):
        for i, (imgs, labels, pe_code) in enumerate(data_loader):
            # Collect important info in the batch
            batch_size = imgs.shape[0]
            dll_values_batch = pe_code[0].numpy()
            checksum_values_batch = pe_code[1].numpy()

            # Configure input
            real_imgs = Variable(imgs.type(FloatTensor))
            real_labels_input = to_categorical(labels.numpy(), num_columns=opt.n_classes, FloatTensor=FloatTensor)

            # Adversarial ground truths
            valid = Variable(FloatTensor(batch_size, 1).fill_(1.0), requires_grad=False)
            fake = Variable(FloatTensor(batch_size, 1).fill_(0.0), requires_grad=False)

            # -----------------
            #  Train Generator
            # -----------------

            optimizer_G.zero_grad()

            # Sample noise and labels as generator input
            z = Variable(FloatTensor(np.random.normal(0, 1, (batch_size, opt.latent_dim))))
            code_input = build_feature_code(scaled_cs_vals=scaled_unique_cs_vals, code_dim=opt.code_dim,
                                            dll_value=dll_values_batch[0], checksum_value=checksum_values_batch[0],
                                            unique_cs_vals=unique_cs_vals, unique_dll_vals=unique_dll_vals)
            for idx in range(1, batch_size):
                n_code_input = build_feature_code(scaled_cs_vals=scaled_unique_cs_vals, code_dim=opt.code_dim,
                                                  dll_value=dll_values_batch[idx],
                                                  checksum_value=checksum_values_batch[idx],
                                                  unique_cs_vals=unique_cs_vals, unique_dll_vals=unique_dll_vals)
                code_input = np.append(code_input, n_code_input, axis=0)
            code_input = Variable(FloatTensor(code_input))

            # Generate a batch of images
            gen_imgs = generator(z, real_labels_input, code_input)

            # Loss measures generator's ability to fool the discriminator
            validity, _, _ = discriminator(gen_imgs)
            g_loss = adversarial_loss(validity, valid)

            g_loss.backward()
            optimizer_G.step()

            # ---------------------
            #  Train Discriminator
            # ---------------------

            optimizer_D.zero_grad()

            # Loss for real images
            real_val_pred, real_label_pred, real_latent_code_pred = discriminator(real_imgs)
            d_real_loss = adversarial_loss(real_val_pred, valid)

            # Loss for fake images
            fake_val_pred, fake_label_pred, fake_latent_code_pred = discriminator(gen_imgs.detach())
            d_fake_loss = adversarial_loss(fake_val_pred, fake)

            # Total discriminator loss
            d_loss = (d_real_loss + d_fake_loss) / 2

            d_loss.backward()
            optimizer_D.step()

            # ------------------
            # Information Loss
            # ------------------

            optimizer_info.zero_grad()

            # Sample noise for generator input
            z = Variable(FloatTensor(np.random.normal(0, 1, (batch_size, opt.latent_dim))))
            gen_imgs = generator(z, real_labels_input, code_input)
            _, pred_label, pred_code = discriminator(gen_imgs)

            labels = Variable(LongTensor(labels.numpy()))
            info_loss = lambda_cat * categorical_loss(pred_label, labels) + lambda_con * continuous_loss(
                pred_code, code_input
            )

            info_loss.backward()
            optimizer_info.step()

            # --------------
            # Log Progress
            # --------------

            print(
                "[Epoch %d/%d] [Batch %d/%d] [D loss: %f] [G loss: %f] [info loss: %f]"
                % (epoch, opt.n_epochs, i, len(data_loader), d_loss.item(), g_loss.item(), info_loss.item())
            )
            log_loss_models(d_loss=d_loss.item(), g_loss=g_loss.item(), info_loss=info_loss.item())
            if g_loss.item() <= opt.best_loss:
                torch.save(generator.state_dict(), f'weights/generator_V3_{epoch}_{opt.n_epochs}_best_128px.pt')

            batches_done = epoch * len(data_loader) + i
            if batches_done % opt.sample_interval == 0:
                sample_image_v3_9(n_row=opt.n_classes, batches_done=batches_done, generator=generator,
                                  static_label=static_label, static_code=static_code, static_z=static_z,
                                  FloatTensor=FloatTensor, latent_dim=opt.latent_dim,
                                  unique_cs_vals=scaled_unique_cs_vals,
                                  unique_dll_vals=one_hot_unique_dll_vals)

        generate_image_v3_9(n_row=opt.n_classes, epoch_index=epoch, generator=generator, static_label=static_label,
                            static_code=static_code, static_z=static_z, FloatTensor=FloatTensor, opt=opt,
                            unique_dll_vals=one_hot_unique_dll_vals, unique_cs_vals=scaled_unique_cs_vals)

    torch.save(generator.state_dict(), f'weights/generator_V3_{opt.n_epochs}_128px.pt')
    torch.save(discriminator.state_dict(), f'weights/discriminator_V3_{opt.n_epochs}_128px.pt')

    generator_load = Generator(opt=opt)
    discriminator_load = Discriminator(opt=opt)
    generator_load.load_state_dict(torch.load(f'weights/generator_V3_{opt.n_epochs}_128px.pt'))
    generator_load.eval()
    discriminator_load.load_state_dict(torch.load(f'weights/discriminator_V3_{opt.n_epochs}_128px.pt'))
    discriminator_load.eval()


if __name__ == '__main__':
    main()
