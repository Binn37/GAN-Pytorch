from typing import Tuple, Any

import torch
import torchvision
import cv2


def default_image_loader(path):
    image = cv2.imread(path)
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

    return image


class ImageLoader(torch.utils.data.Dataset):
    def __init__(self, transform=None, loader=default_image_loader):
        super().__init__()
        self.transform = transform
        self.loader = loader

    def __getitem__(self, index: int) -> Tuple[Any, Any]:
        """
        Args:
            index (int): Index

        Returns:
            tuple: (sample, target) where target is class_index of the target class.
        """
        path, target = self.samples[index]
        sample = self.loader(path)
        if self.transform is not None:
            sample = self.transform(sample)
        if self.target_transform is not None:
            target = self.target_transform(target)

        return sample, target

    def __len__(self) -> int:
        return len(self.samples)


# def read_dataset(path, transform_info):
#     dataset = torchvision.datasets.ImageFolder(root=path, transform=transform_info)
#
#     return dataset

def load_dataset(args, transform_info, shuffle, path, cuda):
    kwargs = {'num_workers': 0, 'pin_memory': True} if cuda else {}

    # means = (0.485, 0.456, 0.406)
    # stds = (0.229, 0.224, 0.225)

    data_loader = torch.utils.data.DataLoader(ImageLoader(root=path, transform=transform_info),
                                              batch_size=args.batch_size,
                                              shuffle=shuffle, **kwargs)

    return data_loader

# def load_dataset(dataset_read, batch_size, shuffle):
#     data_loader = torch.utils.data.DataLoader(ImageLoader(
#         datasets=dataset_read,
#         batch_size=batch_size,
#         shuffle=shuffle
#     ))
#
#     return data_loader
